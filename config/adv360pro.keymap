#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>

/ {
    macros {
        // Input source toggle for Mac (Ctrl+Option+Space)
        input_src: input_src {
            compatible = "zmk,behavior-macro";
            label = "INPUT_SOURCE_TOGGLE";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL &kp LALT>
                , <&macro_tap &kp SPACE>
                , <&macro_release &kp LCTRL &kp LALT>
                ;
        };

        // Shortcut for Command+Shift+A
        cmd_shift_a: cmd_shift_a {
            compatible = "zmk,behavior-macro";
            label = "CMD_SHIFT_A";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LGUI &kp LSHFT>
                , <&macro_tap &kp A>
                , <&macro_release &kp LGUI &kp LSHFT>
                ;
        };
    };

    behaviors {
        // Auto-shift behavior - hold any key for its shifted version
        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            #binding-cells = <2>;
            tapping-term-ms = <250>;  // Hold for 300ms to get shifted character
            quick-tap-ms = <150>;     // Allow quick repeated taps
            flavor = "tap-preferred"; // Prioritize tap for normal typing
            bindings = <&kp>, <&kp>;
        };

        // Layer-tap behavior with custom timing
        lt_custom: layer_tap_custom {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_CUSTOM";
            #binding-cells = <2>;
            tapping-term-ms = <250>;  // Slightly longer hold time for layer switching
            quick-tap-ms = <150>;
            flavor = "balanced";      // Balance between tap and hold
            bindings = <&mo>, <&kp>;
        };

        // Mod-tap for modifier keys with custom timing
        mt_custom: mod_tap_custom {
            compatible = "zmk,behavior-hold-tap";
            label = "MOD_TAP_CUSTOM";
            #binding-cells = <2>;
            tapping-term-ms = <175>;  // Faster response for modifiers
            quick-tap-ms = <125>;
            flavor = "hold-preferred"; // Prefer hold for modifiers
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            /* Example usage of custom hold-tap behaviors:
             * Replace any &kp KEY with:
             *   &hm LCTRL A     - Tap for 'A', hold for Left Control
             *   &lt_custom 2 SPACE - Tap for Space, hold for Layer 2
             *   &mt_custom LSHIFT ESC - Tap for Escape, hold for Left Shift
             *
             * Timing adjustments:
             * - tapping-term-ms: How long to hold before triggering hold behavior (in milliseconds)
             * - quick-tap-ms: Time window for quick repeated taps
             * - flavor options:
             *   - "tap-preferred": Prioritizes tap (good for typing)
             *   - "hold-preferred": Prioritizes hold (good for modifiers)
             *   - "balanced": Middle ground between tap and hold
             */
            bindings = <
                &as PLUS EQUAL  &as EXCL N1  &as AT N2  &as HASH N3  &as DLLR N4  &as PRCNT N5  &tog 1                                                           &mo 3  &as CARET N6  &as AMPS N7  &as STAR N8  &as LPAR N9  &as RPAR N0  &as UNDER MINUS
                &kp TAB   &as LS(Q) Q  &as LS(W) W  &as LS(E) E  &as LS(R) R  &as LS(T) T  &input_src                                                            &cmd_shift_a &as LS(Y) Y  &as LS(U) U  &as LS(I) I  &as LS(O) O  &as LS(P) P  &as PIPE BSLH
                &kp ESC   &as LS(A) A  &as LS(S) S  &as LS(D) D  &as LS(F) F  &as LS(G) G  &none           &kp LCTRL &kp LALT &kp PG_UP  &kp RCTRL           &none &as LS(H) H  &as LS(J) J  &as LS(K) K  &as LS(L) L  &as COLON SEMI &as DQT SQT
                &kp LSHFT &as LS(Z) Z  &as LS(X) X  &as LS(C) C  &as LS(V) V  &as LS(B) B                            &kp DEL &kp PG_DN                           &as LS(N) N  &as LS(M) M  &as LT COMMA &as GT DOT  &as QMARK FSLH &kp RSHFT
                &mo 2     &as TILDE GRAVE &kp CAPS &kp LEFT &kp RIGHT                &kp SPACE &kp BSPC   &kp LGUI  &kp RGUI &lt_custom 2 ENTER &lt_custom 1 SPACE              &kp UP &kp DOWN  &as LBRC LBKT &as RBRC RBKT &mo 2
            >;
        };
        keypad {
            bindings = <
                &kp EQUAL &kp N1    &kp N2   &kp N3   &kp N4     &kp N5 &trans                                                           &mo 3 &kp N6 &kp KP_NUM &kp KP_EQUAL &kp KP_DIVIDE &kp KP_MULTIPLY &kp MINUS
                &kp TAB   &kp Q     &kp W    &kp E    &kp R      &kp T  &input_src                                                            &cmd_shift_a &kp Y  &kp KP_N7  &kp UP    &kp KP_N9     &kp KP_MINUS    &kp BSLH
                &kp ESC   &kp A     &kp S    &kp D    &kp F      &kp G  &none           &kp LCTRL &kp LALT &kp PG_UP  &kp RCTRL           &none &kp H  &kp LEFT  &kp DOWN    &kp RIGHT     &kp KP_PLUS     &kp SQT
                &kp LSHFT &kp Z     &kp X    &kp C    &kp V      &kp B                            &kp DEL &kp PG_DN                           &kp N  &kp KP_N1  &kp KP_N2    &kp KP_N3     &kp KP_ENTER    &kp RSHFT
                &mo 2     &kp GRAVE &kp CAPS &kp LEFT &kp RIGHT                &kp SPACE &kp BSPC   &kp LGUI  &kp RGUI &kp ENTER &kp KP_N0              &kp UP     &kp DOWN     &kp KP_DOT    &kp RBKT        &mo 2
            >;
        };
        fn {
            bindings = <
                &kp F1 &kp F2 &kp F3 &kp F4 &kp F5 &kp F6 &tog 1                                           &mo 3 &kp F7 &kp F8 &kp F9 &kp F10 &kp F11 &kp F12
                &trans &trans &trans &trans &trans &trans  &none                                           &none &trans &trans &trans &trans  &trans  &trans
                &trans &trans &trans &trans &trans &trans  &none        &trans &trans &trans &trans        &none &trans &trans &trans &trans  &trans  &trans
                &trans &trans &trans &trans &trans &trans                      &trans &trans                     &trans &trans &trans &trans  &trans  &trans
                &trans &trans &trans &trans &trans               &trans &trans &trans &trans &trans &trans              &trans &trans &trans  &trans  &trans
            >;
        };
        mod {
            bindings = <
                &none &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &none                                                               &trans      &none &none      &none      &none &none &none
                &none &none        &none        &none        &none        &none        &bootloader                                                         &bootloader &none &none      &none      &none &none &none
                &none &none        &none        &none        &none        &none        &none             &none &none &bt BT_CLR &none                      &none       &none &none      &none      &none &none &none
                &none &none        &none        &none        &none        &none                                &none &none                                             &none &none      &none      &none &none &none
                &none &none        &none        &none        &none                                 &none &none &none &none      &bl BL_TOG &rgb_ug RGB_TOG                   &bl BL_INC &bl BL_DEC &none &none &none
            >;
        };
    };
};

